// Autogenerated from Pigeon (v2.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.helloinside.helpcrunch_plugin;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class HelpCrunchInitializationParams {
    private @NonNull Long helpCrunchAppId;
    public @NonNull Long getHelpCrunchAppId() { return helpCrunchAppId; }
    public void setHelpCrunchAppId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"helpCrunchAppId\" is null.");
      }
      this.helpCrunchAppId = setterArg;
    }

    private @NonNull String organizationName;
    public @NonNull String getOrganizationName() { return organizationName; }
    public void setOrganizationName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"organizationName\" is null.");
      }
      this.organizationName = setterArg;
    }

    private @NonNull String appSecret;
    public @NonNull String getAppSecret() { return appSecret; }
    public void setAppSecret(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"appSecret\" is null.");
      }
      this.appSecret = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private HelpCrunchInitializationParams() {}
    public static final class Builder {
      private @Nullable Long helpCrunchAppId;
      public @NonNull Builder setHelpCrunchAppId(@NonNull Long setterArg) {
        this.helpCrunchAppId = setterArg;
        return this;
      }
      private @Nullable String organizationName;
      public @NonNull Builder setOrganizationName(@NonNull String setterArg) {
        this.organizationName = setterArg;
        return this;
      }
      private @Nullable String appSecret;
      public @NonNull Builder setAppSecret(@NonNull String setterArg) {
        this.appSecret = setterArg;
        return this;
      }
      public @NonNull HelpCrunchInitializationParams build() {
        HelpCrunchInitializationParams pigeonReturn = new HelpCrunchInitializationParams();
        pigeonReturn.setHelpCrunchAppId(helpCrunchAppId);
        pigeonReturn.setOrganizationName(organizationName);
        pigeonReturn.setAppSecret(appSecret);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("helpCrunchAppId", helpCrunchAppId);
      toMapResult.put("organizationName", organizationName);
      toMapResult.put("appSecret", appSecret);
      return toMapResult;
    }
    static @NonNull HelpCrunchInitializationParams fromMap(@NonNull Map<String, Object> map) {
      HelpCrunchInitializationParams pigeonResult = new HelpCrunchInitializationParams();
      Object helpCrunchAppId = map.get("helpCrunchAppId");
      pigeonResult.setHelpCrunchAppId((helpCrunchAppId == null) ? null : ((helpCrunchAppId instanceof Integer) ? (Integer)helpCrunchAppId : (Long)helpCrunchAppId));
      Object organizationName = map.get("organizationName");
      pigeonResult.setOrganizationName((String)organizationName);
      Object appSecret = map.get("appSecret");
      pigeonResult.setAppSecret((String)appSecret);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class HelpCrunchUser {
    private @NonNull String id;
    public @NonNull String getId() { return id; }
    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @Nullable String name;
    public @Nullable String getName() { return name; }
    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable String email;
    public @Nullable String getEmail() { return email; }
    public void setEmail(@Nullable String setterArg) {
      this.email = setterArg;
    }

    private @Nullable String company;
    public @Nullable String getCompany() { return company; }
    public void setCompany(@Nullable String setterArg) {
      this.company = setterArg;
    }

    private @Nullable String phone;
    public @Nullable String getPhone() { return phone; }
    public void setPhone(@Nullable String setterArg) {
      this.phone = setterArg;
    }

    private @Nullable Map<String, Object> customData;
    public @Nullable Map<String, Object> getCustomData() { return customData; }
    public void setCustomData(@Nullable Map<String, Object> setterArg) {
      this.customData = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private HelpCrunchUser() {}
    public static final class Builder {
      private @Nullable String id;
      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable String name;
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable String email;
      public @NonNull Builder setEmail(@Nullable String setterArg) {
        this.email = setterArg;
        return this;
      }
      private @Nullable String company;
      public @NonNull Builder setCompany(@Nullable String setterArg) {
        this.company = setterArg;
        return this;
      }
      private @Nullable String phone;
      public @NonNull Builder setPhone(@Nullable String setterArg) {
        this.phone = setterArg;
        return this;
      }
      private @Nullable Map<String, Object> customData;
      public @NonNull Builder setCustomData(@Nullable Map<String, Object> setterArg) {
        this.customData = setterArg;
        return this;
      }
      public @NonNull HelpCrunchUser build() {
        HelpCrunchUser pigeonReturn = new HelpCrunchUser();
        pigeonReturn.setId(id);
        pigeonReturn.setName(name);
        pigeonReturn.setEmail(email);
        pigeonReturn.setCompany(company);
        pigeonReturn.setPhone(phone);
        pigeonReturn.setCustomData(customData);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("name", name);
      toMapResult.put("email", email);
      toMapResult.put("company", company);
      toMapResult.put("phone", phone);
      toMapResult.put("customData", customData);
      return toMapResult;
    }
    static @NonNull HelpCrunchUser fromMap(@NonNull Map<String, Object> map) {
      HelpCrunchUser pigeonResult = new HelpCrunchUser();
      Object id = map.get("id");
      pigeonResult.setId((String)id);
      Object name = map.get("name");
      pigeonResult.setName((String)name);
      Object email = map.get("email");
      pigeonResult.setEmail((String)email);
      Object company = map.get("company");
      pigeonResult.setCompany((String)company);
      Object phone = map.get("phone");
      pigeonResult.setPhone((String)phone);
      Object customData = map.get("customData");
      pigeonResult.setCustomData((Map<String, Object>)customData);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class HelpCrunchPluginCodec extends StandardMessageCodec {
    public static final HelpCrunchPluginCodec INSTANCE = new HelpCrunchPluginCodec();
    private HelpCrunchPluginCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return HelpCrunchInitializationParams.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return HelpCrunchUser.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof HelpCrunchInitializationParams) {
        stream.write(128);
        writeValue(stream, ((HelpCrunchInitializationParams) value).toMap());
      } else 
      if (value instanceof HelpCrunchUser) {
        stream.write(129);
        writeValue(stream, ((HelpCrunchUser) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface HelpCrunchPlugin {
    void initialize(@NonNull HelpCrunchInitializationParams params, Result<Void> result);
    void showChatScreen(Result<Void> result);
    void updateUser(@NonNull HelpCrunchUser user, Result<Void> result);
    void logoutUser(Result<Void> result);

    /** The codec used by HelpCrunchPlugin. */
    static MessageCodec<Object> getCodec() {
      return HelpCrunchPluginCodec.INSTANCE;
    }

    /** Sets up an instance of `HelpCrunchPlugin` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, HelpCrunchPlugin api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HelpCrunchPlugin.initialize", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              HelpCrunchInitializationParams paramsArg = (HelpCrunchInitializationParams)args.get(0);
              if (paramsArg == null) {
                throw new NullPointerException("paramsArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.initialize(paramsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HelpCrunchPlugin.showChatScreen", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.showChatScreen(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HelpCrunchPlugin.updateUser", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              HelpCrunchUser userArg = (HelpCrunchUser)args.get(0);
              if (userArg == null) {
                throw new NullPointerException("userArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.updateUser(userArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HelpCrunchPlugin.logoutUser", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.logoutUser(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
