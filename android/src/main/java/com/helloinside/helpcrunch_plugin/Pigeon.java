// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.helloinside.helpcrunch_plugin;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Pigeon {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /**
   * code used to generate the pigeon api
   * see README for details
   *
   * Generated class from Pigeon that represents data sent in messages.
   */
  public static final class HelpCrunchInitializationParams {
    private @NonNull Long helpCrunchAppId;

    public @NonNull Long getHelpCrunchAppId() {
      return helpCrunchAppId;
    }

    public void setHelpCrunchAppId(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"helpCrunchAppId\" is null.");
      }
      this.helpCrunchAppId = setterArg;
    }

    private @NonNull String organizationName;

    public @NonNull String getOrganizationName() {
      return organizationName;
    }

    public void setOrganizationName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"organizationName\" is null.");
      }
      this.organizationName = setterArg;
    }

    private @NonNull String appSecret;

    public @NonNull String getAppSecret() {
      return appSecret;
    }

    public void setAppSecret(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"appSecret\" is null.");
      }
      this.appSecret = setterArg;
    }

    private @NonNull Boolean iOSShouldUsePushNotificationDelegate;

    public @NonNull Boolean getIOSShouldUsePushNotificationDelegate() {
      return iOSShouldUsePushNotificationDelegate;
    }

    public void setIOSShouldUsePushNotificationDelegate(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"iOSShouldUsePushNotificationDelegate\" is null.");
      }
      this.iOSShouldUsePushNotificationDelegate = setterArg;
    }

    private @Nullable Long notificationColor;

    public @Nullable Long getNotificationColor() {
      return notificationColor;
    }

    public void setNotificationColor(@Nullable Long setterArg) {
      this.notificationColor = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    HelpCrunchInitializationParams() {}

    public static final class Builder {

      private @Nullable Long helpCrunchAppId;

      public @NonNull Builder setHelpCrunchAppId(@NonNull Long setterArg) {
        this.helpCrunchAppId = setterArg;
        return this;
      }

      private @Nullable String organizationName;

      public @NonNull Builder setOrganizationName(@NonNull String setterArg) {
        this.organizationName = setterArg;
        return this;
      }

      private @Nullable String appSecret;

      public @NonNull Builder setAppSecret(@NonNull String setterArg) {
        this.appSecret = setterArg;
        return this;
      }

      private @Nullable Boolean iOSShouldUsePushNotificationDelegate;

      public @NonNull Builder setIOSShouldUsePushNotificationDelegate(@NonNull Boolean setterArg) {
        this.iOSShouldUsePushNotificationDelegate = setterArg;
        return this;
      }

      private @Nullable Long notificationColor;

      public @NonNull Builder setNotificationColor(@Nullable Long setterArg) {
        this.notificationColor = setterArg;
        return this;
      }

      public @NonNull HelpCrunchInitializationParams build() {
        HelpCrunchInitializationParams pigeonReturn = new HelpCrunchInitializationParams();
        pigeonReturn.setHelpCrunchAppId(helpCrunchAppId);
        pigeonReturn.setOrganizationName(organizationName);
        pigeonReturn.setAppSecret(appSecret);
        pigeonReturn.setIOSShouldUsePushNotificationDelegate(iOSShouldUsePushNotificationDelegate);
        pigeonReturn.setNotificationColor(notificationColor);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(helpCrunchAppId);
      toListResult.add(organizationName);
      toListResult.add(appSecret);
      toListResult.add(iOSShouldUsePushNotificationDelegate);
      toListResult.add(notificationColor);
      return toListResult;
    }

    static @NonNull HelpCrunchInitializationParams fromList(@NonNull ArrayList<Object> list) {
      HelpCrunchInitializationParams pigeonResult = new HelpCrunchInitializationParams();
      Object helpCrunchAppId = list.get(0);
      pigeonResult.setHelpCrunchAppId((helpCrunchAppId == null) ? null : ((helpCrunchAppId instanceof Integer) ? (Integer) helpCrunchAppId : (Long) helpCrunchAppId));
      Object organizationName = list.get(1);
      pigeonResult.setOrganizationName((String) organizationName);
      Object appSecret = list.get(2);
      pigeonResult.setAppSecret((String) appSecret);
      Object iOSShouldUsePushNotificationDelegate = list.get(3);
      pigeonResult.setIOSShouldUsePushNotificationDelegate((Boolean) iOSShouldUsePushNotificationDelegate);
      Object notificationColor = list.get(4);
      pigeonResult.setNotificationColor((notificationColor == null) ? null : ((notificationColor instanceof Integer) ? (Integer) notificationColor : (Long) notificationColor));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class HelpCrunchUser {
    private @NonNull String id;

    public @NonNull String getId() {
      return id;
    }

    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    private @Nullable String name;

    public @Nullable String getName() {
      return name;
    }

    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable String email;

    public @Nullable String getEmail() {
      return email;
    }

    public void setEmail(@Nullable String setterArg) {
      this.email = setterArg;
    }

    private @Nullable String company;

    public @Nullable String getCompany() {
      return company;
    }

    public void setCompany(@Nullable String setterArg) {
      this.company = setterArg;
    }

    private @Nullable String phone;

    public @Nullable String getPhone() {
      return phone;
    }

    public void setPhone(@Nullable String setterArg) {
      this.phone = setterArg;
    }

    private @Nullable Map<String, Object> customData;

    public @Nullable Map<String, Object> getCustomData() {
      return customData;
    }

    public void setCustomData(@Nullable Map<String, Object> setterArg) {
      this.customData = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    HelpCrunchUser() {}

    public static final class Builder {

      private @Nullable String id;

      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable String name;

      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }

      private @Nullable String email;

      public @NonNull Builder setEmail(@Nullable String setterArg) {
        this.email = setterArg;
        return this;
      }

      private @Nullable String company;

      public @NonNull Builder setCompany(@Nullable String setterArg) {
        this.company = setterArg;
        return this;
      }

      private @Nullable String phone;

      public @NonNull Builder setPhone(@Nullable String setterArg) {
        this.phone = setterArg;
        return this;
      }

      private @Nullable Map<String, Object> customData;

      public @NonNull Builder setCustomData(@Nullable Map<String, Object> setterArg) {
        this.customData = setterArg;
        return this;
      }

      public @NonNull HelpCrunchUser build() {
        HelpCrunchUser pigeonReturn = new HelpCrunchUser();
        pigeonReturn.setId(id);
        pigeonReturn.setName(name);
        pigeonReturn.setEmail(email);
        pigeonReturn.setCompany(company);
        pigeonReturn.setPhone(phone);
        pigeonReturn.setCustomData(customData);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(id);
      toListResult.add(name);
      toListResult.add(email);
      toListResult.add(company);
      toListResult.add(phone);
      toListResult.add(customData);
      return toListResult;
    }

    static @NonNull HelpCrunchUser fromList(@NonNull ArrayList<Object> list) {
      HelpCrunchUser pigeonResult = new HelpCrunchUser();
      Object id = list.get(0);
      pigeonResult.setId((String) id);
      Object name = list.get(1);
      pigeonResult.setName((String) name);
      Object email = list.get(2);
      pigeonResult.setEmail((String) email);
      Object company = list.get(3);
      pigeonResult.setCompany((String) company);
      Object phone = list.get(4);
      pigeonResult.setPhone((String) phone);
      Object customData = list.get(5);
      pigeonResult.setCustomData((Map<String, Object>) customData);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class HelpCrunchPluginCodec extends StandardMessageCodec {
    public static final HelpCrunchPluginCodec INSTANCE = new HelpCrunchPluginCodec();

    private HelpCrunchPluginCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return HelpCrunchInitializationParams.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return HelpCrunchUser.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof HelpCrunchInitializationParams) {
        stream.write(128);
        writeValue(stream, ((HelpCrunchInitializationParams) value).toList());
      } else if (value instanceof HelpCrunchUser) {
        stream.write(129);
        writeValue(stream, ((HelpCrunchUser) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface HelpCrunchPlugin {
    /**
     * Initializes the HelpCrunch plugin.
     * This method must be called before any other method.
     */
    void initialize(@NonNull HelpCrunchInitializationParams params, @NonNull Result<Void> result);
    /** show the native chat screen */
    void showChatScreen(@NonNull Result<Void> result);

    void updateUser(@NonNull HelpCrunchUser user, @NonNull Result<Void> result);

    void logoutUser(@NonNull Result<Void> result);

    void registerForRemoteMessages(@NonNull Result<Void> result);

    void getNumberOfUnreadChats(@NonNull Result<Long> result);

    @NonNull 
    Boolean isReady();

    @NonNull 
    Boolean hasError();

    /** The codec used by HelpCrunchPlugin. */
    static @NonNull MessageCodec<Object> getCodec() {
      return HelpCrunchPluginCodec.INSTANCE;
    }
    /**Sets up an instance of `HelpCrunchPlugin` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable HelpCrunchPlugin api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.initialize", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                HelpCrunchInitializationParams paramsArg = (HelpCrunchInitializationParams) args.get(0);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.initialize(paramsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.showChatScreen", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.showChatScreen(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.updateUser", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                HelpCrunchUser userArg = (HelpCrunchUser) args.get(0);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.updateUser(userArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.logoutUser", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.logoutUser(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.registerForRemoteMessages", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.registerForRemoteMessages(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.getNumberOfUnreadChats", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Long> resultCallback =
                    new Result<Long>() {
                      public void success(Long result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getNumberOfUnreadChats(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.isReady", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.isReady();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.hasError", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.hasError();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
