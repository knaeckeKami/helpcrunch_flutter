// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "Pigeon.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface HelpCrunchInitializationParams ()
+ (HelpCrunchInitializationParams *)fromList:(NSArray *)list;
+ (nullable HelpCrunchInitializationParams *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface HelpCrunchUser ()
+ (HelpCrunchUser *)fromList:(NSArray *)list;
+ (nullable HelpCrunchUser *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation HelpCrunchInitializationParams
+ (instancetype)makeWithHelpCrunchAppId:(NSNumber *)helpCrunchAppId
    organizationName:(NSString *)organizationName
    appSecret:(NSString *)appSecret
    iOSShouldUsePushNotificationDelegate:(NSNumber *)iOSShouldUsePushNotificationDelegate
    notificationColor:(nullable NSNumber *)notificationColor {
  HelpCrunchInitializationParams* pigeonResult = [[HelpCrunchInitializationParams alloc] init];
  pigeonResult.helpCrunchAppId = helpCrunchAppId;
  pigeonResult.organizationName = organizationName;
  pigeonResult.appSecret = appSecret;
  pigeonResult.iOSShouldUsePushNotificationDelegate = iOSShouldUsePushNotificationDelegate;
  pigeonResult.notificationColor = notificationColor;
  return pigeonResult;
}
+ (HelpCrunchInitializationParams *)fromList:(NSArray *)list {
  HelpCrunchInitializationParams *pigeonResult = [[HelpCrunchInitializationParams alloc] init];
  pigeonResult.helpCrunchAppId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.helpCrunchAppId != nil, @"");
  pigeonResult.organizationName = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.organizationName != nil, @"");
  pigeonResult.appSecret = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.appSecret != nil, @"");
  pigeonResult.iOSShouldUsePushNotificationDelegate = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.iOSShouldUsePushNotificationDelegate != nil, @"");
  pigeonResult.notificationColor = GetNullableObjectAtIndex(list, 4);
  return pigeonResult;
}
+ (nullable HelpCrunchInitializationParams *)nullableFromList:(NSArray *)list {
  return (list) ? [HelpCrunchInitializationParams fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.helpCrunchAppId ?: [NSNull null]),
    (self.organizationName ?: [NSNull null]),
    (self.appSecret ?: [NSNull null]),
    (self.iOSShouldUsePushNotificationDelegate ?: [NSNull null]),
    (self.notificationColor ?: [NSNull null]),
  ];
}
@end

@implementation HelpCrunchUser
+ (instancetype)makeWithId:(NSString *)id
    name:(nullable NSString *)name
    email:(nullable NSString *)email
    company:(nullable NSString *)company
    phone:(nullable NSString *)phone
    customData:(nullable NSDictionary<NSString *, id> *)customData {
  HelpCrunchUser* pigeonResult = [[HelpCrunchUser alloc] init];
  pigeonResult.id = id;
  pigeonResult.name = name;
  pigeonResult.email = email;
  pigeonResult.company = company;
  pigeonResult.phone = phone;
  pigeonResult.customData = customData;
  return pigeonResult;
}
+ (HelpCrunchUser *)fromList:(NSArray *)list {
  HelpCrunchUser *pigeonResult = [[HelpCrunchUser alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.id != nil, @"");
  pigeonResult.name = GetNullableObjectAtIndex(list, 1);
  pigeonResult.email = GetNullableObjectAtIndex(list, 2);
  pigeonResult.company = GetNullableObjectAtIndex(list, 3);
  pigeonResult.phone = GetNullableObjectAtIndex(list, 4);
  pigeonResult.customData = GetNullableObjectAtIndex(list, 5);
  return pigeonResult;
}
+ (nullable HelpCrunchUser *)nullableFromList:(NSArray *)list {
  return (list) ? [HelpCrunchUser fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.id ?: [NSNull null]),
    (self.name ?: [NSNull null]),
    (self.email ?: [NSNull null]),
    (self.company ?: [NSNull null]),
    (self.phone ?: [NSNull null]),
    (self.customData ?: [NSNull null]),
  ];
}
@end

@interface HelpCrunchPluginCodecReader : FlutterStandardReader
@end
@implementation HelpCrunchPluginCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [HelpCrunchInitializationParams fromList:[self readValue]];
    case 129: 
      return [HelpCrunchUser fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface HelpCrunchPluginCodecWriter : FlutterStandardWriter
@end
@implementation HelpCrunchPluginCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[HelpCrunchInitializationParams class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[HelpCrunchUser class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface HelpCrunchPluginCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation HelpCrunchPluginCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[HelpCrunchPluginCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[HelpCrunchPluginCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *HelpCrunchPluginGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    HelpCrunchPluginCodecReaderWriter *readerWriter = [[HelpCrunchPluginCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void HelpCrunchPluginSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<HelpCrunchPlugin> *api) {
  /// Initializes the HelpCrunch plugin.
  /// This method must be called before any other method.
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.initialize"
        binaryMessenger:binaryMessenger
        codec:HelpCrunchPluginGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeParams:completion:)], @"HelpCrunchPlugin api (%@) doesn't respond to @selector(initializeParams:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        HelpCrunchInitializationParams *arg_params = GetNullableObjectAtIndex(args, 0);
        [api initializeParams:arg_params completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// show the native chat screen
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.showChatScreen"
        binaryMessenger:binaryMessenger
        codec:HelpCrunchPluginGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(showChatScreenWithCompletion:)], @"HelpCrunchPlugin api (%@) doesn't respond to @selector(showChatScreenWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api showChatScreenWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.updateUser"
        binaryMessenger:binaryMessenger
        codec:HelpCrunchPluginGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateUserUser:completion:)], @"HelpCrunchPlugin api (%@) doesn't respond to @selector(updateUserUser:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        HelpCrunchUser *arg_user = GetNullableObjectAtIndex(args, 0);
        [api updateUserUser:arg_user completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.logoutUser"
        binaryMessenger:binaryMessenger
        codec:HelpCrunchPluginGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(logoutUserWithCompletion:)], @"HelpCrunchPlugin api (%@) doesn't respond to @selector(logoutUserWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api logoutUserWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.registerForRemoteMessages"
        binaryMessenger:binaryMessenger
        codec:HelpCrunchPluginGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(registerForRemoteMessagesWithCompletion:)], @"HelpCrunchPlugin api (%@) doesn't respond to @selector(registerForRemoteMessagesWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api registerForRemoteMessagesWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.getNumberOfUnreadChats"
        binaryMessenger:binaryMessenger
        codec:HelpCrunchPluginGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getNumberOfUnreadChatsWithCompletion:)], @"HelpCrunchPlugin api (%@) doesn't respond to @selector(getNumberOfUnreadChatsWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getNumberOfUnreadChatsWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.isReady"
        binaryMessenger:binaryMessenger
        codec:HelpCrunchPluginGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isReadyWithError:)], @"HelpCrunchPlugin api (%@) doesn't respond to @selector(isReadyWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api isReadyWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.hasError"
        binaryMessenger:binaryMessenger
        codec:HelpCrunchPluginGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(hasErrorWithError:)], @"HelpCrunchPlugin api (%@) doesn't respond to @selector(hasErrorWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api hasErrorWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
