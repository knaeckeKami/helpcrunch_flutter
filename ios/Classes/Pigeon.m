// Autogenerated from Pigeon (v2.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "Pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface HelpCrunchInitializationParams ()
+ (HelpCrunchInitializationParams *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface HelpCrunchUser ()
+ (HelpCrunchUser *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation HelpCrunchInitializationParams
+ (instancetype)makeWithHelpCrunchAppId:(NSNumber *)helpCrunchAppId
    organizationName:(NSString *)organizationName
    appSecret:(NSString *)appSecret
    iOSShouldUsePushNotificationDelegate:(NSNumber *)iOSShouldUsePushNotificationDelegate {
  HelpCrunchInitializationParams* pigeonResult = [[HelpCrunchInitializationParams alloc] init];
  pigeonResult.helpCrunchAppId = helpCrunchAppId;
  pigeonResult.organizationName = organizationName;
  pigeonResult.appSecret = appSecret;
  pigeonResult.iOSShouldUsePushNotificationDelegate = iOSShouldUsePushNotificationDelegate;
  return pigeonResult;
}
+ (HelpCrunchInitializationParams *)fromMap:(NSDictionary *)dict {
  HelpCrunchInitializationParams *pigeonResult = [[HelpCrunchInitializationParams alloc] init];
  pigeonResult.helpCrunchAppId = GetNullableObject(dict, @"helpCrunchAppId");
  NSAssert(pigeonResult.helpCrunchAppId != nil, @"");
  pigeonResult.organizationName = GetNullableObject(dict, @"organizationName");
  NSAssert(pigeonResult.organizationName != nil, @"");
  pigeonResult.appSecret = GetNullableObject(dict, @"appSecret");
  NSAssert(pigeonResult.appSecret != nil, @"");
  pigeonResult.iOSShouldUsePushNotificationDelegate = GetNullableObject(dict, @"iOSShouldUsePushNotificationDelegate");
  NSAssert(pigeonResult.iOSShouldUsePushNotificationDelegate != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.helpCrunchAppId ? self.helpCrunchAppId : [NSNull null]), @"helpCrunchAppId", (self.organizationName ? self.organizationName : [NSNull null]), @"organizationName", (self.appSecret ? self.appSecret : [NSNull null]), @"appSecret", (self.iOSShouldUsePushNotificationDelegate ? self.iOSShouldUsePushNotificationDelegate : [NSNull null]), @"iOSShouldUsePushNotificationDelegate", nil];
}
@end

@implementation HelpCrunchUser
+ (instancetype)makeWithId:(NSString *)id
    name:(nullable NSString *)name
    email:(nullable NSString *)email
    company:(nullable NSString *)company
    phone:(nullable NSString *)phone
    customData:(nullable NSDictionary<NSString *, id> *)customData {
  HelpCrunchUser* pigeonResult = [[HelpCrunchUser alloc] init];
  pigeonResult.id = id;
  pigeonResult.name = name;
  pigeonResult.email = email;
  pigeonResult.company = company;
  pigeonResult.phone = phone;
  pigeonResult.customData = customData;
  return pigeonResult;
}
+ (HelpCrunchUser *)fromMap:(NSDictionary *)dict {
  HelpCrunchUser *pigeonResult = [[HelpCrunchUser alloc] init];
  pigeonResult.id = GetNullableObject(dict, @"id");
  NSAssert(pigeonResult.id != nil, @"");
  pigeonResult.name = GetNullableObject(dict, @"name");
  pigeonResult.email = GetNullableObject(dict, @"email");
  pigeonResult.company = GetNullableObject(dict, @"company");
  pigeonResult.phone = GetNullableObject(dict, @"phone");
  pigeonResult.customData = GetNullableObject(dict, @"customData");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.id ? self.id : [NSNull null]), @"id", (self.name ? self.name : [NSNull null]), @"name", (self.email ? self.email : [NSNull null]), @"email", (self.company ? self.company : [NSNull null]), @"company", (self.phone ? self.phone : [NSNull null]), @"phone", (self.customData ? self.customData : [NSNull null]), @"customData", nil];
}
@end

@interface HelpCrunchPluginCodecReader : FlutterStandardReader
@end
@implementation HelpCrunchPluginCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [HelpCrunchInitializationParams fromMap:[self readValue]];
    
    case 129:     
      return [HelpCrunchUser fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface HelpCrunchPluginCodecWriter : FlutterStandardWriter
@end
@implementation HelpCrunchPluginCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[HelpCrunchInitializationParams class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[HelpCrunchUser class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface HelpCrunchPluginCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation HelpCrunchPluginCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[HelpCrunchPluginCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[HelpCrunchPluginCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *HelpCrunchPluginGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    HelpCrunchPluginCodecReaderWriter *readerWriter = [[HelpCrunchPluginCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void HelpCrunchPluginSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<HelpCrunchPlugin> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HelpCrunchPlugin.initialize"
        binaryMessenger:binaryMessenger
        codec:HelpCrunchPluginGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeParams:completion:)], @"HelpCrunchPlugin api (%@) doesn't respond to @selector(initializeParams:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        HelpCrunchInitializationParams *arg_params = GetNullableObjectAtIndex(args, 0);
        [api initializeParams:arg_params completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HelpCrunchPlugin.showChatScreen"
        binaryMessenger:binaryMessenger
        codec:HelpCrunchPluginGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(showChatScreenWithCompletion:)], @"HelpCrunchPlugin api (%@) doesn't respond to @selector(showChatScreenWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api showChatScreenWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HelpCrunchPlugin.updateUser"
        binaryMessenger:binaryMessenger
        codec:HelpCrunchPluginGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateUserUser:completion:)], @"HelpCrunchPlugin api (%@) doesn't respond to @selector(updateUserUser:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        HelpCrunchUser *arg_user = GetNullableObjectAtIndex(args, 0);
        [api updateUserUser:arg_user completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HelpCrunchPlugin.logoutUser"
        binaryMessenger:binaryMessenger
        codec:HelpCrunchPluginGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(logoutUserWithCompletion:)], @"HelpCrunchPlugin api (%@) doesn't respond to @selector(logoutUserWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api logoutUserWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HelpCrunchPlugin.registerForRemoteMessages"
        binaryMessenger:binaryMessenger
        codec:HelpCrunchPluginGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(registerForRemoteMessagesWithCompletion:)], @"HelpCrunchPlugin api (%@) doesn't respond to @selector(registerForRemoteMessagesWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api registerForRemoteMessagesWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HelpCrunchPlugin.getNumberOfUnreadChats"
        binaryMessenger:binaryMessenger
        codec:HelpCrunchPluginGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getNumberOfUnreadChatsWithCompletion:)], @"HelpCrunchPlugin api (%@) doesn't respond to @selector(getNumberOfUnreadChatsWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getNumberOfUnreadChatsWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HelpCrunchPlugin.isReady"
        binaryMessenger:binaryMessenger
        codec:HelpCrunchPluginGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isReadyWithError:)], @"HelpCrunchPlugin api (%@) doesn't respond to @selector(isReadyWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api isReadyWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HelpCrunchPlugin.hasError"
        binaryMessenger:binaryMessenger
        codec:HelpCrunchPluginGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(hasErrorWithError:)], @"HelpCrunchPlugin api (%@) doesn't respond to @selector(hasErrorWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api hasErrorWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
