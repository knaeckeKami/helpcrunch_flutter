// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

/// code used to generate the pigeon api
/// see README for details
class HelpCrunchInitializationParams {
  HelpCrunchInitializationParams({
    required this.helpCrunchAppId,
    required this.organizationName,
    required this.appSecret,
    required this.iOSShouldUsePushNotificationDelegate,
    this.notificationColor,
  });

  int helpCrunchAppId;

  String organizationName;

  String appSecret;

  bool iOSShouldUsePushNotificationDelegate;

  int? notificationColor;

  Object encode() {
    return <Object?>[
      helpCrunchAppId,
      organizationName,
      appSecret,
      iOSShouldUsePushNotificationDelegate,
      notificationColor,
    ];
  }

  static HelpCrunchInitializationParams decode(Object result) {
    result as List<Object?>;
    return HelpCrunchInitializationParams(
      helpCrunchAppId: result[0]! as int,
      organizationName: result[1]! as String,
      appSecret: result[2]! as String,
      iOSShouldUsePushNotificationDelegate: result[3]! as bool,
      notificationColor: result[4] as int?,
    );
  }
}

class HelpCrunchUser {
  HelpCrunchUser({
    required this.id,
    this.name,
    this.email,
    this.company,
    this.phone,
    this.customData,
  });

  String id;

  String? name;

  String? email;

  String? company;

  String? phone;

  Map<String?, Object?>? customData;

  Object encode() {
    return <Object?>[
      id,
      name,
      email,
      company,
      phone,
      customData,
    ];
  }

  static HelpCrunchUser decode(Object result) {
    result as List<Object?>;
    return HelpCrunchUser(
      id: result[0]! as String,
      name: result[1] as String?,
      email: result[2] as String?,
      company: result[3] as String?,
      phone: result[4] as String?,
      customData: (result[5] as Map<Object?, Object?>?)?.cast<String?, Object?>(),
    );
  }
}

class _HelpCrunchPluginCodec extends StandardMessageCodec {
  const _HelpCrunchPluginCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is HelpCrunchInitializationParams) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is HelpCrunchUser) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return HelpCrunchInitializationParams.decode(readValue(buffer)!);
      case 129: 
        return HelpCrunchUser.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class HelpCrunchPlugin {
  /// Constructor for [HelpCrunchPlugin].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HelpCrunchPlugin({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _HelpCrunchPluginCodec();

  /// Initializes the HelpCrunch plugin.
  /// This method must be called before any other method.
  Future<void> initialize(HelpCrunchInitializationParams arg_params) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.initialize', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_params]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// show the native chat screen
  Future<void> showChatScreen() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.showChatScreen', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> updateUser(HelpCrunchUser arg_user) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.updateUser', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_user]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> logoutUser() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.logoutUser', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> registerForRemoteMessages() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.registerForRemoteMessages', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<int> getNumberOfUnreadChats() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.getNumberOfUnreadChats', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<bool> isReady() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.isReady', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<bool> hasError() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.helpcrunch.HelpCrunchPlugin.hasError', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }
}
