// Autogenerated from Pigeon (v2.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class HelpCrunchInitializationParams {
  HelpCrunchInitializationParams({
    required this.helpCrunchAppId,
    required this.organizationName,
    required this.appSecret,
  });

  int helpCrunchAppId;
  String organizationName;
  String appSecret;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['helpCrunchAppId'] = helpCrunchAppId;
    pigeonMap['organizationName'] = organizationName;
    pigeonMap['appSecret'] = appSecret;
    return pigeonMap;
  }

  static HelpCrunchInitializationParams decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return HelpCrunchInitializationParams(
      helpCrunchAppId: pigeonMap['helpCrunchAppId']! as int,
      organizationName: pigeonMap['organizationName']! as String,
      appSecret: pigeonMap['appSecret']! as String,
    );
  }
}

class HelpCrunchUser {
  HelpCrunchUser({
    required this.id,
    this.name,
    this.email,
    this.company,
    this.phone,
    this.customData,
  });

  String id;
  String? name;
  String? email;
  String? company;
  String? phone;
  Map<String?, Object?>? customData;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['id'] = id;
    pigeonMap['name'] = name;
    pigeonMap['email'] = email;
    pigeonMap['company'] = company;
    pigeonMap['phone'] = phone;
    pigeonMap['customData'] = customData;
    return pigeonMap;
  }

  static HelpCrunchUser decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return HelpCrunchUser(
      id: pigeonMap['id']! as String,
      name: pigeonMap['name'] as String?,
      email: pigeonMap['email'] as String?,
      company: pigeonMap['company'] as String?,
      phone: pigeonMap['phone'] as String?,
      customData: (pigeonMap['customData'] as Map<Object?, Object?>?)?.cast<String?, Object?>(),
    );
  }
}

class _HelpCrunchPluginCodec extends StandardMessageCodec {
  const _HelpCrunchPluginCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is HelpCrunchInitializationParams) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is HelpCrunchUser) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return HelpCrunchInitializationParams.decode(readValue(buffer)!);
      
      case 129:       
        return HelpCrunchUser.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class HelpCrunchPlugin {
  /// Constructor for [HelpCrunchPlugin].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HelpCrunchPlugin({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _HelpCrunchPluginCodec();

  Future<void> initialize(HelpCrunchInitializationParams arg_params) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HelpCrunchPlugin.initialize', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_params]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> showChatScreen() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HelpCrunchPlugin.showChatScreen', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> updateUser(HelpCrunchUser arg_user) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HelpCrunchPlugin.updateUser', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_user]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> logoutUser() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HelpCrunchPlugin.logoutUser', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}
